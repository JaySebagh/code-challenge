// https://leetcode.com/problems/majority-element/submissions/
// Given an array nums of size n, return the majority element.
// The majority element is the element that appears more than âŒŠn / 2âŒ‹ times. You may assume that the majority element always exists in the array.

// brainstorm/sudo code
// loop through the array
// store each value as a key in the array
// set the value as the instance counter
// get the key with the largest value

const majorityElement = function(nums) {
    // check if array only has one element
    if(nums.length === 1) return nums[0]
    let instances = new Map();
    // key with the highest value
    let highestValKey = 0;
    // highest value
    let highestVal = 0;
    
    for(num of nums){
        // if !key set key with value 1 else increment value by 1
        instances.set(num, instances.get(num) + 1 || 1);
        const currVal = instances.get(num);
        // keep track of highest value and its key
        if(currVal > highestVal){
            highestVal = currVal;
            highestValKey = num;
        }
    };
    
    return highestValKey;
};

console.log(majorityElement([8,8,7,7,7])) // 7
console.log(majorityElement([3])) // 3
console.log(majorityElement([3,2,3])) // 3
console.log(majorityElement([2,2,1,1,1,2,2])) // 2
console.log(majorityElement([-2,-2,1,1,1,-2,-2])) // -2
console.log(majorityElement([-2,-2,1,1,1,-2,-2,2])) // -2
console.log(majorityElement([1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15])) // 3
console.log(majorityElement([1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15,1,2,3,3,3,4,5,6,7,8,8,9,10,10,11,12,13,14,15,15])) // 3

// other solutions

const majorityElement = function(nums) {
    let count = {}; // mapping of element to it's frequency
    for(n of nums){
        count[n] ? count[n]++ : count[n] = 1;
        if(count[n] > nums.length / 2 )  return n;
    }
};
